
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;





/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author sendi
 */
public class InventarisBarangObatFrame extends javax.swing.JFrame {

    /**
     * Creates new form InventarisBarangObatFrame
     */
    public InventarisBarangObatFrame() {
        initComponents();
        refreshTable();
        setFont();
    }
    
    private void setFont(){
        try {
            Font fontCustom = Font.createFont(Font.TRUETYPE_FONT,new File("src/Font/Poppins-ExtraBold.ttf")).deriveFont(30f);
            jLabel1.setFont(fontCustom);
            Font Label = Font.createFont(Font.TRUETYPE_FONT,new File("src/Font/Poppins-SemiBold.ttf")).deriveFont(13f);
            jLabel2.setFont(Label);
            jLabel3.setFont(Label);
            jLabel4.setFont(Label);
            jLabel5.setFont(Label);
            jLabel6.setFont(Label);
            jLabel7.setFont(Label);
            jLabel8.setFont(Label);
            jLabel9.setFont(Label);
            jLabel10.setFont(Label);
            jLabel11.setFont(Label);
            jLabel12.setFont(Label);
            jLabel13.setFont(Label);
            Font fontButton = Font.createFont(Font.TRUETYPE_FONT,new File("src/Font/Poppins-ExtraBold.ttf")).deriveFont(12f);
            jButton1.setFont(fontButton);
            jButton2.setFont(fontButton);
            jButton3.setFont(fontButton);
            jButton4.setFont(fontButton);
            jButton5.setFont(fontButton);
            jButton6.setFont(fontButton);
            jButton7.setFont(fontButton);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtKode = new javax.swing.JTextField();
        txtNama = new javax.swing.JTextField();
        comboKategori = new javax.swing.JComboBox<>();
        comboJenis = new javax.swing.JComboBox<>();
        txtMerek = new javax.swing.JTextField();
        txtHargaBeli = new javax.swing.JTextField();
        txtHargaJual = new javax.swing.JTextField();
        txtJumlah = new javax.swing.JTextField();
        txtTanggalMasuk = new com.toedter.calendar.JDateChooser();
        jLabel12 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableObat = new javax.swing.JTable();
        txtExpired = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBackground(new java.awt.Color(127, 249, 174));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Kode Obat");

        jLabel3.setText("Nama Obat");

        jLabel4.setText("Kategori Obat");

        jLabel5.setText("Jenis Obat");

        jLabel6.setText("Merek");

        jLabel7.setText("Harga Beli");

        jLabel8.setText("Harga Jual");

        jLabel9.setText("Jumlah ");

        jLabel10.setText("Tanggal Masuk");

        comboKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih", "Analgesik dan Antipiretik", "Antibiotik", "Antihistamin", "Antiinflamasi Nonsteroid (AINS)", "Antidepresan", "Antihipertensi", "Antidiabetik", "Antiviral", "Antiulkus dan Antasida", "Antifungi (Antijamur)", "Obat Kardiovaskular", "Suplemen dan Vitamin", "Antiepilepsi", "Hormonal" }));

        comboJenis.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih", "Tablet", "Kapsul", "Sirup", "Inhaler", "Salep/Krim", "Gel", "Suppositoria", "Suntikan/Injeksi", "Plester Obat (Transdermal Patch)", "Tetes (Drops)", "Larutan Obat (Solution)", "Serbuk (Powder)", "Herbal" }));

        jLabel12.setText("Cari Obat");

        jButton1.setText("Ubah");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Tambah");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Hapus");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel13.setText("Log History");

        tableObat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode Obat", "Nama Obat", "Kategori Obat", "Jenis Obat", "Merek", "Harga Beli", "Harga Jual", "Jumlah", "Tanggal Masuk", "Expired"
            }
        ));
        tableObat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableObatMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableObat);

        jLabel11.setText("Expired");

        jButton4.setText("Cari");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Impor");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Ekspor");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel1.setText("DATA OBAT");

        jButton7.setText("Clear");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(369, 369, 369)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(54, 54, 54)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(399, 399, 399))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel2))
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtKode, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMerek, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(comboKategori, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtNama)
                                        .addComponent(comboJenis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(434, 434, 434)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtJumlah, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(txtTanggalMasuk, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtExpired, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtHargaJual, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtHargaBeli, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(jLabel7)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 958, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtKode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(comboKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(comboJenis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMerek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtHargaBeli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtHargaJual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9))
                            .addComponent(txtJumlah, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(txtTanggalMasuk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel10)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(txtExpired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        deleteMedicine();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        searchMedicine();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
         JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Open CSV File");
    fileChooser.setCurrentDirectory(new File(System.getProperty("user.home"))); // Lokasi default
    int userSelection = fileChooser.showOpenDialog(null); // Ganti 'null' jika ada JFrame/JPanel sebagai induk

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToOpen = fileChooser.getSelectedFile();
        try (BufferedReader br = new BufferedReader(new FileReader(fileToOpen))) {
            String line;
            DefaultTableModel model = (DefaultTableModel) tableObat.getModel();

            // Hapus semua data sebelumnya dari tabel
            model.setRowCount(0);

            // Siapkan koneksi ke SQLite
            String url = "jdbc:sqlite:E:\\NETBEANS PROJECT\\SendiPratama-2210010529-UTS\\obat.db"; // Ganti dengan path database SQLite Anda
            try (Connection conn = DriverManager.getConnection(url)) {
                String sql = "INSERT INTO data_obat (kode_obat, nama_obat, kategori_obat, jenis_obat, merek, harga_beli, harga_jual, jumlah, tanggal_masuk, expired) " +
                             "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement pstmt = conn.prepareStatement(sql);

                boolean isHeader = true; // Gunakan ini jika ingin melewati header
                while ((line = br.readLine()) != null) {
                    String[] data = line.split(","); // Asumsi pemisah data adalah koma

                    // Jika ingin melewati header CSV, gunakan flag
                    if (isHeader) {
                        isHeader = false; // Lewati header (baris pertama)
                        continue; // Lanjutkan ke baris berikutnya
                    }

                    // Tambahkan data ke tabel GUI
                    model.addRow(data);

                    // Tambahkan data ke database SQLite
                    try {
                        pstmt.setString(1, data[0]); // kode_obat
                        pstmt.setString(2, data[1]); // nama_obat
                        pstmt.setString(3, data[2]); // kategori_obat
                        pstmt.setString(4, data[3]); // jenis_obat
                        pstmt.setString(5, data[4]); // merek
                        pstmt.setDouble(6, Double.parseDouble(data[5])); // harga_beli
                        pstmt.setDouble(7, Double.parseDouble(data[6])); // harga_jual
                        pstmt.setInt(8, Integer.parseInt(data[7])); // jumlah
                        pstmt.setString(9, data[8]); // tanggal_masuk
                        pstmt.setString(10, data[9]); // expired
                        pstmt.addBatch(); // Simpan per batch untuk efisiensi
                    } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {
                        JOptionPane.showMessageDialog(null, "Kesalahan format data pada baris: " + line, "Error", JOptionPane.ERROR_MESSAGE);
                        continue; // Lewati baris ini jika format salah
                    }
                }

                // Eksekusi batch update untuk database SQLite
                pstmt.executeBatch();
                JOptionPane.showMessageDialog(null, "Data berhasil diimpor dari " + fileToOpen.getAbsolutePath() + " ke database.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat menyimpan ke database SQLite: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat membaca file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save as CSV");
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home"))); // Lokasi default

        // Tetapkan nama file default
        fileChooser.setSelectedFile(new File("DATA OBAT.csv"));

        int userSelection = fileChooser.showSaveDialog(this); // Ganti 'this' dengan JFrame/JPanel Anda

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            // Tambahkan ekstensi ".csv" jika tidak ada
            if (!filePath.toLowerCase().endsWith(".csv")) {
                filePath += ".csv";
            }

            try (PrintWriter writer = new PrintWriter(new FileWriter(filePath))) {
                TableModel model = tableObat.getModel();

                // Tulis header tabel
                for (int i = 0; i < model.getColumnCount(); i++) {
                    writer.print(model.getColumnName(i));
                    if (i < model.getColumnCount() - 1) {
                        writer.print(",");
                    }
                }
                writer.println();

                // Tulis baris data
                for (int i = 0; i < model.getRowCount(); i++) {
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        writer.print(model.getValueAt(i, j));
                        if (j < model.getColumnCount() - 1) {
                            writer.print(",");
                        }
                    }
                    writer.println();
                }

                writer.flush();
                JOptionPane.showMessageDialog(this, "Data berhasil diekspor ke " + filePath, "Sukses", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengekspor: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    addMedicine();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        updateMedicine();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tableObatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableObatMouseClicked
        int row = tableObat.getSelectedRow();

        // Pastikan ada baris yang dipilih
        if (row != -1) {
            try {
                txtKode.setText(tableObat.getValueAt(row, 0).toString());
                txtNama.setText(tableObat.getValueAt(row, 1).toString());
                comboKategori.setSelectedItem(tableObat.getValueAt(row, 2).toString());
                comboJenis.setSelectedItem(tableObat.getValueAt(row, 3).toString());
                txtMerek.setText(tableObat.getValueAt(row, 4).toString());
                txtHargaBeli.setText(tableObat.getValueAt(row, 5).toString());
                txtHargaJual.setText(tableObat.getValueAt(row, 6).toString());
                txtJumlah.setText(tableObat.getValueAt(row, 7).toString());

                // Konversi nilai tabel ke tipe Date untuk txtTanggalMasuk
                Object tanggalMasukObj = tableObat.getValueAt(row, 8);
                if (tanggalMasukObj instanceof Date) {
                    txtTanggalMasuk.setDate((Date) tanggalMasukObj);
                } else if (tanggalMasukObj instanceof String) {
                    try {
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); // Ubah format sesuai kebutuhan
                        Date tanggalMasuk = sdf.parse(tanggalMasukObj.toString());
                        txtTanggalMasuk.setDate(tanggalMasuk);
                    } catch (ParseException e) {
                        txtTanggalMasuk.setDate(null);
                        JOptionPane.showMessageDialog(null, "Format tanggal Masuk tidak valid: " + e.getMessage());
                    }
                } else {
                    txtTanggalMasuk.setDate(null); // Set null jika tipe data tidak valid
                }

                // Konversi nilai tabel ke tipe Date untuk txtExpired (kolom ke-9)
                Object expiredObj = tableObat.getValueAt(row, 9);
                if (expiredObj instanceof Date) {
                    txtExpired.setDate((Date) expiredObj);
                } else if (expiredObj instanceof String) {
                    try {
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); // Ubah format sesuai kebutuhan
                        Date expiredDate = sdf.parse(expiredObj.toString());
                        txtExpired.setDate(expiredDate);
                    } catch (ParseException e) {
                        txtExpired.setDate(null);
                        JOptionPane.showMessageDialog(null, "Format tanggal Expired tidak valid: " + e.getMessage());
                    }
                } else {
                    txtExpired.setDate(null); // Set null jika tipe data tidak valid
                }

            } catch (Exception e) {
                // Log kesalahan atau tampilkan pesan
                JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat memuat data: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Silakan pilih baris yang ingin dimuat.");
        }

    }//GEN-LAST:event_tableObatMouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // Membersihkan JTextField
        txtKode.setText("");
        txtNama.setText("");
        txtMerek.setText("");
        txtHargaBeli.setText("");
        txtHargaJual.setText("");
        txtJumlah.setText("");

        // Membersihkan JComboBox
        comboKategori.setSelectedIndex(-1);
        comboJenis.setSelectedIndex(-1);

        // Membersihkan JDateChooser
        txtTanggalMasuk.setDate(null);
        txtExpired.setDate(null);

    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatMacLightLaf.setup();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventarisBarangObatFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboJenis;
    private javax.swing.JComboBox<String> comboKategori;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTable tableObat;
    private com.toedter.calendar.JDateChooser txtExpired;
    private javax.swing.JTextField txtHargaBeli;
    private javax.swing.JTextField txtHargaJual;
    private javax.swing.JTextField txtJumlah;
    private javax.swing.JTextField txtKode;
    private javax.swing.JTextField txtMerek;
    private javax.swing.JTextField txtNama;
    private javax.swing.JTextField txtSearch;
    private com.toedter.calendar.JDateChooser txtTanggalMasuk;
    // End of variables declaration//GEN-END:variables
private void addMedicine() {
        try {
            // Mengambil input dari form
            String kode = txtKode.getText();
            String nama = txtNama.getText();
            String kategori = (String) comboKategori.getSelectedItem();
            String jenis = (String) comboJenis.getSelectedItem();
            String merek = txtMerek.getText();

            // Validasi dan parsing harga beli dan jual
            double hargaBeli = 0;
            double hargaJual = 0;
            int jumlah = 0;

            try {
                hargaBeli = Double.parseDouble(txtHargaBeli.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Harga Beli harus berupa angka!");
                return;
            }

            try {
                hargaJual = Double.parseDouble(txtHargaJual.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Harga Jual harus berupa angka!");
                return;
            }

            try {
                jumlah = Integer.parseInt(txtJumlah.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Jumlah harus berupa angka!");
                return;
            }

            // Mengambil dan memformat tanggal
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String tanggalMasuk = null;
            String expired = null;

            if (txtTanggalMasuk.getDate() != null) {
                tanggalMasuk = dateFormat.format(txtTanggalMasuk.getDate()); // Mengonversi ke string
            } else {
                JOptionPane.showMessageDialog(null, "Tanggal Masuk tidak boleh kosong!");
                return;
            }

            if (txtExpired.getDate() != null) {
                expired = dateFormat.format(txtExpired.getDate()); // Mengonversi ke string
            } else {
                JOptionPane.showMessageDialog(null, "Tanggal Expired tidak boleh kosong!");
                return;
            }

            // Menambahkan obat ke database
            DatabaseHelper.addMedicine(kode, nama, kategori, jenis, merek, hargaBeli, hargaJual, jumlah, tanggalMasuk, expired);

            // Refresh tabel dan tampilkan pesan
            refreshTable();
            JOptionPane.showMessageDialog(null, "Obat berhasil ditambahkan!");
            
            // Catat ke history
            logHistory("Tambah", "Obat " + nama + " (Kode: " + kode + ") berhasil ditambahkan.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage());
        }
    }

    // Memperbarui data obat ke database
    private void updateMedicine() {
        try {
            // Mengambil input dari form
            String kode = txtKode.getText();
            String nama = txtNama.getText();
            String kategori = (String) comboKategori.getSelectedItem();
            String jenis = (String) comboJenis.getSelectedItem();
            String merek = txtMerek.getText();

            // Validasi dan parsing harga beli dan jual
            double hargaBeli = 0;
            double hargaJual = 0;
            int jumlah = 0;

            try {
                hargaBeli = Double.parseDouble(txtHargaBeli.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Harga Beli harus berupa angka!");
                return;
            }

            try {
                hargaJual = Double.parseDouble(txtHargaJual.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Harga Jual harus berupa angka!");
                return;
            }

            try {
                jumlah = Integer.parseInt(txtJumlah.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Jumlah harus berupa angka!");
                return;
            }

            // Mengambil dan memformat tanggal
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String tanggalMasuk = null;
            String expired = null;

            if (txtTanggalMasuk.getDate() != null) {
                tanggalMasuk = dateFormat.format(txtTanggalMasuk.getDate());
            } else {
                JOptionPane.showMessageDialog(null, "Tanggal Masuk tidak boleh kosong!");
                return;
            }

            if (txtExpired.getDate() != null) {
                expired = dateFormat.format(txtExpired.getDate());
            } else {
                JOptionPane.showMessageDialog(null, "Tanggal Expired tidak boleh kosong!");
                return;
            }

            // Memperbarui data obat ke database
            DatabaseHelper.updateMedicine(kode, nama, kategori, jenis, merek, hargaBeli, hargaJual, jumlah, tanggalMasuk, expired);

            // Refresh tabel dan tampilkan pesan
            refreshTable();
            JOptionPane.showMessageDialog(null, "Obat berhasil diperbarui!");
            
            // Catat ke history
            logHistory("Ubah", "Obat " + nama + " (Kode: " + kode + ") berhasil diperbarui.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage());
        }
    }

    // Menghapus obat dari database
    private void deleteMedicine() {
        try {
            String kode = txtKode.getText();
            DatabaseHelper.deleteMedicine(kode);
            refreshTable();
            JOptionPane.showMessageDialog(null, "Obat berhasil dihapus!");
            // Catat ke history
            logHistory("Hapus", "Obat dengan Kode: " + kode + " berhasil dihapus.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage());
        }
    }

    // Mencari obat berdasarkan kode atau merek obat
    private void searchMedicine() {
        try {
            String keyword = txtSearch.getText();
            List<Medicine> medicines = DatabaseHelper.searchMedicine(keyword);
            DefaultTableModel model = (DefaultTableModel) tableObat.getModel();
            model.setRowCount(0);

            for (Medicine medicine : medicines) {
                model.addRow(new Object[]{
                        medicine.getKode(),
                        medicine.getNama(),
                        medicine.getKategori(),
                        medicine.getJenis(),
                        medicine.getMerek(),
                        medicine.getHargaBeli(),
                        medicine.getHargaJual(),
                        medicine.getJumlah(),
                        medicine.getTanggalMasuk(),
                        medicine.getExpired()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage());
        }
    }

    // Refresh tabel dengan data terbaru dari database
    private void refreshTable() {
        try {
            List<Medicine> medicines = DatabaseHelper.getAllMedicines();
            DefaultTableModel model = (DefaultTableModel) tableObat.getModel();
            model.setRowCount(0);

            for (Medicine medicine : medicines) {
                model.addRow(new Object[]{
                        medicine.getKode(),
                        medicine.getNama(),
                        medicine.getKategori(),
                        medicine.getJenis(),
                        medicine.getMerek(),
                        medicine.getHargaBeli(),
                        medicine.getHargaJual(),
                        medicine.getJumlah(),
                        medicine.getTanggalMasuk(),
                        medicine.getExpired()
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat memperbarui tabel: " + e.getMessage());
        }
    }
 
  private void logHistory(String action, String detail) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String timestamp = dateFormat.format(new Date());
    jTextArea1.append("[" + timestamp + "] " + action + ": " + detail + "\n");
}  
    
}
